
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "Hmsc"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('Hmsc')
Loading required package: coda
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("Hmsc")
> ### * Hmsc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Hmsc
> ### Title: Hmsc
> ### Aliases: Hmsc
> 
> ### ** Examples
> 
> # Creating a Hmsc object without phylogeny, trait data or random levels
> m = Hmsc(Y=TD$Y, XData=TD$X, XFormula=~x1+x2)
> 
> # Creating a Hmsc object with phylogeny and traits
> m = Hmsc(Y=TD$Y, XData=TD$X, XFormula=~x1+x2,
+ TrData=TD$Tr, TrFormula=~T1+T2, phyloTree=TD$phylo)
> 
> # Creating a Hmsc object with 2 nested random levels (50 sampling units in 20 plots)
> studyDesign = data.frame(sample = as.factor(1:50), plot = as.factor(sample(1:20,50,replace=TRUE)))
> rL1 = HmscRandomLevel(units=TD$studyDesign$plot)
> rL2 = HmscRandomLevel(units=TD$studyDesign$sample)
> m = Hmsc(Y=TD$Y, XData=TD$X, XFormula=~x1+x2,
+ studyDesign=studyDesign,ranLevels=list("sample"=rL1,"plot"=rL2))
> 
> 
> 
> 
> cleanEx()
> nameEx("HmscRandomLevel")
> ### * HmscRandomLevel
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: HmscRandomLevel
> ### Title: Create an 'Hmsc' random level
> ### Aliases: HmscRandomLevel
> 
> ### ** Examples
> 
> # Setting a random level with 50 units
> rL = HmscRandomLevel(units=TD$studyDesign$sample)
> 
> # Setting a spatial random level
> rL = HmscRandomLevel(sData=TD$xycoords)
> 
> # Setting a covariate-dependent random level.
> rL = HmscRandomLevel(xData=data.frame(x1=rep(1,length(TD$X$x1)),x2=TD$X$x2))
> 
> 
> 
> 
> cleanEx()
> nameEx("Mtest")
> ### * Mtest
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Mtest
> ### Title: Matrix Method Tester for Posterior Sampling
> ### Aliases: Mtest
> 
> ### ** Examples
> 
> data(TD)
> set.seed(4711)
> system.time(out <- Mtest(TD$m))
Setting updater$Gamma2=FALSE due to specified phylogeny matrix
   user  system elapsed 
  0.144   0.007   0.150 
> out
$Gamma
           [,1]       [,2]        [,3]
[1,]  0.7315853 -0.4682175 -0.01231365
[2,]  0.9544272 -0.4688419  1.48508610
[3,] -0.3990884  0.1299346  0.89749220

$Eta
$Eta[[1]]
              [,1]         [,2]
 [1,] -0.931263920 -0.733780909
 [2,]  1.164563109  0.437737354
 [3,]  2.207287834  1.183053368
 [4,] -1.346225767  0.994911435
 [5,]  0.407376640 -0.268208374
 [6,]  0.157448283  2.268038882
 [7,]  0.368684912  0.273488072
 [8,]  0.640624159  0.103719550
 [9,]  0.764221723 -1.281826654
[10,]  2.406223107  0.379454390
[11,] -0.018808601  1.914788924
[12,] -0.529787511 -0.008115104
[13,]  0.397500021  1.835901300
[14,]  0.079171003 -1.007910194
[15,]  0.003003019 -2.385197121
[16,]  0.364732053 -0.242223186
[17,]  1.541796504 -0.937580946
[18,]  0.188347123 -0.301119931
[19,] -1.023767015  1.000960177
[20,] -0.874326023  0.999992552
[21,] -2.803318580  0.267236117
[22,] -1.106448882 -0.812144416
[23,]  3.661135699  1.378505031
[24,]  2.056117955 -0.221086826
[25,] -0.046541229 -0.579281695
[26,]  0.757631414 -1.514040177
[27,]  1.039779134 -1.220884255
[28,]  2.633500615 -0.095357274
[29,]  0.340230169  1.021938099
[30,] -1.269555724 -0.307490447
[31,] -1.904224906  0.654971102
[32,]  1.868601225  1.721764975
[33,] -3.673035622 -0.218767577
[34,]  1.727476267  0.055953860
[35,]  0.279672280 -0.681935775
[36,] -2.161703128  1.120283239
[37,] -2.524713126 -0.346564143
[38,] -2.288976614 -0.380236667
[39,] -2.829620984  1.670926745
[40,]  0.703471806 -1.019530938
[41,]  0.511025119 -0.862244192
[42,]  0.581716969 -0.183486656
[43,]  2.480535160  0.803492846
[44,]  1.530223243 -0.076109264
[45,]  1.451562036 -0.416126055
[46,] -5.237187036 -0.377931772
[47,] -0.469554460 -0.434724359
[48,] -2.742842788 -0.335024137
[49,]  0.164348761 -2.677985407
[50,] -2.047874244  0.299026370

$Eta[[2]]
            [,1]       [,2]
 [1,]  1.0777990 -0.2500085
 [2,] -2.9328496 -3.4039511
 [3,]  1.6274756  2.0514638
 [4,] -2.3849498 -0.1999719
 [5,] -0.3063420  0.1873686
 [6,] -0.6604540 -0.2225285
 [7,]  1.4616368 -2.1608441
 [8,]  0.6403196  0.1979912
 [9,] -1.5628619 -0.9437112
[10,] -0.4575370 -1.9294932


> rm(.Random.seed)
> 
> 
> 
> 
> cleanEx()
> nameEx("alignPosterior")
> ### * alignPosterior
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: alignPosterior
> ### Title: alignPosterior
> ### Aliases: alignPosterior
> 
> ### ** Examples
> 
> # Align the posterior for a previously fitted HMSC model
> m = alignPosterior(TD$m)
> 
> 
> 
> 
> cleanEx()
> nameEx("biPlot")
> ### * biPlot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: biPlot
> ### Title: biPlot
> ### Aliases: biPlot
> 
> ### ** Examples
> 
> # Construct an ordination biplot using two chosen latent factors from a previously fitted HMSC model
> etaPost = getPostEstimate(TD$m, "Eta")
> lambdaPost=getPostEstimate(TD$m, "Lambda")
> biPlot(TD$m, etaPost = etaPost, lambdaPost=lambdaPost, factors=c(1,2))
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("computeAssociations")
> ### * computeAssociations
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: computeAssociations
> ### Title: computeAssociations
> ### Aliases: computeAssociations
> 
> ### ** Examples
> 
> # Compute the associations (residual correlations) between species from a HMSC model
> assoc = computeAssociations(TD$m)
> 
> 
> 
> 
> cleanEx()
> nameEx("computePredictedValues")
> ### * computePredictedValues
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: computePredictedValues
> ### Title: computePredictedValues
> ### Aliases: computePredictedValues
> 
> ### ** Examples
> 
> # Compute predicted values using a previously fitted HMSC model
> preds = computePredictedValues(TD$m)
> 
> ## Not run: 
> ##D # Compute predicted values for a previously fitted HMSC model using 2 folds
> ##D partition = createPartition(TD$m, nfolds = 2)
> ##D predsCV1 = computePredictedValues(TD$m,partition=partition)
> ##D 
> ##D # Compute conditional predictions for a previously fitted HMSC model using 2 folds
> ##D partition = createPartition(TD$m, nfolds = 2)
> ##D predsCV2 = computePredictedValues(TD$m, partition = partition,
> ##D partition.sp = 1:m$ns, mcmcStep = 100)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("computeVariancePartitioning")
> ### * computeVariancePartitioning
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: computeVariancePartitioning
> ### Title: computeVariancePartitioning
> ### Aliases: computeVariancePartitioning
> 
> ### ** Examples
> 
> # Partition the explained variance for a previously fitted model
> # without grouping environmental covariates
> VP = computeVariancePartitioning(TD$m)
> 
> # Partition the explained variance for a previously fitted model
> # while grouping the two environmental variables together
> VP = computeVariancePartitioning(TD$m, group=c(1,1), groupnames = c("Habitat"))
> 
> 
> 
> 
> cleanEx()
> nameEx("computeWAIC")
> ### * computeWAIC
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: computeWAIC
> ### Title: computeWAIC
> ### Aliases: computeWAIC
> 
> ### ** Examples
> 
> # Compute WAIC of previously sampled Hmsc object
> WAIC = computeWAIC(TD$m)
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("constructGradient")
> ### * constructGradient
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: constructGradient
> ### Title: constructGradient
> ### Aliases: constructGradient
> 
> ### ** Examples
> 
> # Construct gradient for environmental covariate called 'x1'.
> Gradient = constructGradient(TD$m, focalVariable="x1")
# weights:  3 (2 variable)
initial  value 34.657359 
final  value 34.655390 
converged
> 
> # Construct gradient for environmental covariate called 'x1'
> # while setting the other covariate to its most likely values
> Gradient = constructGradient(TD$m, focalVariable="x1",non.focalVariables=list(x2=list(1)))
> 
> 
> 
> 
> cleanEx()
> nameEx("constructKnots")
> ### * constructKnots
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: constructKnots
> ### Title: constructKnots
> ### Aliases: constructKnots
> 
> ### ** Examples
> 
> #Creating knots for some 2 dimensional spatial data
> n = 100
> xycoords = matrix(runif(2*n),ncol=2)
> xyKnots = constructKnots(xycoords,knotDist = 0.2, minKnotDist = 0.5)
> 
> 
> 
> 
> cleanEx()
> nameEx("convertToCodaObject")
> ### * convertToCodaObject
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: convertToCodaObject
> ### Title: convertToCodaObject
> ### Aliases: convertToCodaObject
> 
> ### ** Examples
> 
> # Convert recorded posterior samples in \code{Hmsc} object to coda object
> codaObject = convertToCodaObject(TD$m)
> 
> # Convert recorded posterior samples, starting from sample 100, in m object to coda object
> codaObject = convertToCodaObject(TD$m, start=100)
> 
> 
> 
> 
> cleanEx()
> nameEx("createPartition")
> ### * createPartition
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: createPartition
> ### Title: createPartition
> ### Aliases: createPartition
> 
> ### ** Examples
> 
> # Create 3 folds for a HMSC object
> partition = createPartition(TD$m, nfolds = 3)
> 
> 
> 
> cleanEx()
> nameEx("evaluateModelFit")
> ### * evaluateModelFit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: evaluateModelFit
> ### Title: evaluateModelFit
> ### Aliases: evaluateModelFit
> 
> ### ** Examples
> 
> # Evaluate model fit
> preds = computePredictedValues(TD$m)
> MF = evaluateModelFit(hM=TD$m, predY=preds)
> 
> # Evaluate model performance based on cross validation: this will be slow
> ## Not run: 
> ##D partition = createPartition(TD$m, nfolds = 2)
> ##D predsCV1 = computePredictedValues(TD$m, partition=partition)
> ##D MF = evaluateModelFit(hM=TD$m, predY=predsCV1)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("getPostEstimate")
> ### * getPostEstimate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getPostEstimate
> ### Title: getPostEstimate
> ### Aliases: getPostEstimate
> 
> ### ** Examples
> 
> # Get posterior mean and support for species' responses to environmental covariates
> postBeta = getPostEstimate(TD$m, parName='Beta')
> 
> # Get posterior mean and support for species' responses to latent factors for the first random level
> postLambda = getPostEstimate(TD$m, parName='Lambda', r=1)
> 
> 
> 
> 
> cleanEx()
> nameEx("plotBeta")
> ### * plotBeta
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotBeta
> ### Title: plotBeta
> ### Aliases: plotBeta
> 
> ### ** Examples
> 
> # Plot posterior support values of species' environmental responses
> betaPost=getPostEstimate(TD$m, "Beta")
> plotBeta(TD$m, post=betaPost, param="Support")
> 
> # Plot parameter estimates of species' environmental responses together with the phylogenetic tree
> betaPost=getPostEstimate(TD$m, "Beta")
> plotBeta(TD$m, post=betaPost, param="Mean", plotTree=TRUE)
[1] 0.3 1.0 0.0 1.0
> 
> 
> 
> 
> cleanEx()
> nameEx("plotGamma")
> ### * plotGamma
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotGamma
> ### Title: plotGamma
> ### Aliases: plotGamma
> 
> ### ** Examples
> 
> # Plot posterior support values of trait effects on environmental responses
> gammaPost=getPostEstimate(TD$m, "Gamma")
> plotGamma(TD$m, post=gammaPost, param="Support")
> 
> # Plot parameter estimates of trait effects on environmental responses
> gammaPost=getPostEstimate(TD$m, "Gamma")
> plotGamma(TD$m, post=gammaPost, param="Mean")
> 
> 
> 
> 
> cleanEx()
> nameEx("plotGradient")
> ### * plotGradient
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotGradient
> ### Title: plotGradient
> ### Aliases: plotGradient
> 
> ### ** Examples
> 
> # Plot response of species 2 over the gradient of environmental variable x1
> Gradient = constructGradient(TD$m, focalVariable="x1")
# weights:  3 (2 variable)
initial  value 34.657359 
final  value 34.655390 
converged
> predY = predict(TD$m, Gradient=Gradient)
> plotGradient(TD$m, Gradient, pred=predY, measure="Y", index = 2, showData = TRUE, jigger = 0.05)
[1] 0.98
> # Plot modelled species richness over the gradient of environmental variable x1
> Gradient = constructGradient(TD$m, focalVariable="x1")
# weights:  3 (2 variable)
initial  value 34.657359 
final  value 34.655390 
converged
> predY = predict(TD$m, Gradient=Gradient)
> plotGradient(TD$m, Gradient, pred=predY, measure="S")
[1] 0.995
> 
> 
> 
> 
> cleanEx()
> nameEx("plotVariancePartitioning")
> ### * plotVariancePartitioning
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotVariancePartitioning
> ### Title: plotVariancePartitioning
> ### Aliases: plotVariancePartitioning
> 
> ### ** Examples
> 
> # Plot how the explained variance of a previously fitted model is partitioned
> VP = computeVariancePartitioning(TD$m)
> plotVariancePartitioning(TD$m, VP)
> 
> 
> 
> 
> cleanEx()
> nameEx("poolMcmcChains")
> ### * poolMcmcChains
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: poolMcmcChains
> ### Title: poolMcmcChains
> ### Aliases: poolMcmcChains
> 
> ### ** Examples
> 
> # Combine the posteriors from all chains in a Hmsc object
> postList = TD$m$postList
> pooledPost = poolMcmcChains(postList)
> 
> 
> 
> 
> cleanEx()
> nameEx("prepareGradient")
> ### * prepareGradient
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: prepareGradient
> ### Title: prepareGradient
> ### Aliases: prepareGradient
> 
> ### ** Examples
> 
> ## Not run: 
> ##D Gradient = prepareGradient(hM=m, XDataNew=XDataNew, sDataNew=sDataNew)
> ##D predY = predict(m, Gradient=Gradient)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("sampleMcmc")
> ### * sampleMcmc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sampleMcmc
> ### Title: sampleMCMC
> ### Aliases: sampleMcmc
> 
> ### ** Examples
> 
> ## samples=20 is ridiculously low, but runs fast: see the second
> ## example for more proper usage
> m = sampleMcmc(TD$m, samples=20)
[1] "Setting updater$Gamma2=FALSE due to specified phylogeny matrix"
[1] "Chain 1, iteration 1 of 20, (sampling)"
[1] "Chain 1, iteration 2 of 20, (sampling)"
[1] "Chain 1, iteration 3 of 20, (sampling)"
[1] "Chain 1, iteration 4 of 20, (sampling)"
[1] "Chain 1, iteration 5 of 20, (sampling)"
[1] "Chain 1, iteration 6 of 20, (sampling)"
[1] "Chain 1, iteration 7 of 20, (sampling)"
[1] "Chain 1, iteration 8 of 20, (sampling)"
[1] "Chain 1, iteration 9 of 20, (sampling)"
[1] "Chain 1, iteration 10 of 20, (sampling)"
[1] "Chain 1, iteration 11 of 20, (sampling)"
[1] "Chain 1, iteration 12 of 20, (sampling)"
[1] "Chain 1, iteration 13 of 20, (sampling)"
[1] "Chain 1, iteration 14 of 20, (sampling)"
[1] "Chain 1, iteration 15 of 20, (sampling)"
[1] "Chain 1, iteration 16 of 20, (sampling)"
[1] "Chain 1, iteration 17 of 20, (sampling)"
[1] "Chain 1, iteration 18 of 20, (sampling)"
[1] "Chain 1, iteration 19 of 20, (sampling)"
[1] "Chain 1, iteration 20 of 20, (sampling)"
> 
> ## Not run: 
> ##D ## Record 1000 posterior samples while skipping 1 MCMC step between samples
> ##D ## from 2 chains after discarding the first 500 MCMC steps
> ##D m = sampleMcmc(TD$m, samples=1000, transient=500, thin=2, nChains=2, nParallel=1)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("setPriors")
> ### * setPriors
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: setPriors
> ### Title: setPriors
> ### Aliases: setPriors
> 
> ### ** Examples
> 
> # Set priors for random level so that there is minimum of 2 latent factors and maximum of 3
> rL1 = HmscRandomLevel(units=TD$studyDesign$plot)
> rL1 = setPriors(rL1, nfMax=3, nfMin=2)
> 
> # Set shrinkage parameters for priors of random level
> rL1 = HmscRandomLevel(units=TD$studyDesign$plot)
> rL1 = setPriors(rL1, a1=10, a2=10, b1=1, b2=1)
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  4.141 0.207 4.374 0.004 0.005 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
